import { Collection, Message, TextChannel } from 'discord.js';

import Command from './Command';
import { Colors } from '../utils/TextFormat';
import SuperClient from '../SuperClient';
import { Bot } from '../Constants';
import Factory from '../Factory';
import { ICommandPremium } from '../decorators/Premium';
import PermissionController from './PermissionController';
import Permission from './server/Permission';

import CancelRaffle from './raffle/CancelRaffle';
import CreateRaffle from './raffle/CreateRaffle';
import ReRollRaffle from './raffle/ReRollRaffle';
import SetupRaffle from './raffle/SetupRaffle';
import EndRaffle from './raffle/EndRaffle';
import Raffles from './raffle/Raffles';
import Vote from './survey/Vote';
import Question from './survey/Question';
import Help from './bot/Help';
import BotInfo from './bot/BotInfo';
import Prefix from './server/Prefix';
import Invitation from './bot/Invitation';
import Premium from './server/Premium';
import EditRaffle from './raffle/EditRaffle';
import AdvancedCreateRaffle from './raffle/AdvancedCreateRaffle';
import Locale from './server/Locale';

type CommandMap = Collection<string, Command>

interface CommandRunner{
    run(message: Message): void
}

export default class CommandHandler extends Factory implements CommandRunner{

    private static readonly COMMANDS: Command[] = [
        new CancelRaffle(),
        new CreateRaffle(),
        new AdvancedCreateRaffle(),
        new ReRollRaffle(),
        new SetupRaffle(),
        new EndRaffle(),
        new EditRaffle(),
        new Raffles(),
        new Vote(),
        new Question(),
        new Help(),
        new BotInfo(),
        new Invitation(),
        new Prefix(),
        new Permission(),
        new Locale(),
        new Premium()
    ]

    private permissionController: PermissionController = new PermissionController()

    private commands: CommandMap = new Collection<string, Command>()
    private aliases: Collection<string, string> = new Collection<string, string>()

    public registerAllCommands(): void{
        CommandHandler.COMMANDS.forEach(command => this.registerCommand(command))

        this.client.logger.info(`Toplam ${Colors.LIGHT_PURPLE}${this.commands.keyArray().length} ${Colors.AQUA}komut baÅŸarÄ±yla yÃ¼klendi.`)
    }

    public registerCommand(command: Command){
        this.commands.set(command.name, command)

        if(command.aliases && Array.isArray(command.aliases)){
            command.aliases.forEach(alias => {
                this.aliases.set(alias, command.name)
            })
        }
    }

    protected getPermissionController(): PermissionController{
        return this.permissionController
    }

    async run(message: Message){
        const client: SuperClient = this.client

        if(!message.guild){
            return
        }

        if(message.author.bot){
            return
        }

        const channel = message.channel
        if(!(channel instanceof TextChannel)){
            return
        }

        let server = await client.servers.get(message.guild.id)
        if(!server){
            server = await client.servers.create({
                server_id: message.guild?.id
            } as any)
        }

        if(!message.member){
            return
        }

        const channel_id: string = this.client.getSetupManager().getSetupChannel(message.member.id)
        if(channel_id && channel_id === message.channel.id){ // check setup
            return
        }

        const prefix = (client.isDevBuild ? 'dev' : '') + (server.prefix || client.prefix)
        if(!message.content.startsWith(prefix)){
            if(channel.permissionsFor(client.user).has('SEND_MESSAGES')){
                if(message.content === Bot.PREFIX_COMMAND){
                    await channel.send(`ðŸŒˆ   Botun sunucu iÃ§erisinde ki komut Ã¶n adÄ±(prefix): **${server.prefix}**`)

                    return
                }

                if(message.mentions.has(client.user)){
                    await message.channel.send(`ðŸŒˆ   **${SuperClient.NAME}** ve komutlarÄ± hakkÄ±nda daha fazla bilgi iÃ§in: **${server.prefix}help**`)

                    return
                }
            }
        }

        const args: string[] = message.content
            .slice(prefix.length)
            .trim()
            .split(/ +/g)
        const cmd = args.shift().toLowerCase()

        if(cmd.length === 0){
            return
        }

        let command: Command & ICommandPremium | undefined = this.commands.get(cmd) as Command & ICommandPremium;
        if(!command){ // control is alias command
            command = this.commands.get(this.aliases.get(cmd)) as Command & ICommandPremium;
        }

        if(command){
            const authorized: boolean = command.hasPermission(message.member) || message.member.roles.cache.filter(role => {
                return role.name.trim().toLowerCase() === Bot.PERMITTED_ROLE_NAME
            }).size !== 0 || server.isPublicCommand(command.name)
            if(authorized){
                const checkPermissions = this.getPermissionController().checkSelfPermissions(
                    message.guild,
                    message.channel
                )
                if(checkPermissions.has){
                    if(!command.premium || (command.premium && server.isPremium())){
                        command.run(client, server, message, args).then(async (result: boolean) => {
                            if(!result){
                                await channel.send({
                                    embed: command.getUsageEmbed()
                                })
                            }
                        })
                    }else{
                        await channel.send({
                            embed: command.getPremiumEmbed()
                        })
                    }
                }else{
                    if(checkPermissions.missing.includes('SEND_MESSAGES') || checkPermissions.missing.includes('VIEW_CHANNEL')){
                        try{
                            message.author.createDM().then(dmChannel => {
                                dmChannel.send(`Botun Ã§alÄ±ÅŸabilmesi iÃ§in '**${channel.name}**' kanalÄ±nda bota '**Mesaj GÃ¶nder**' yetkisini saÄŸlamanÄ±z/vermeniz gerekiyor. Aksi takdirde bot bu kanala mesaj gÃ¶nderemez ve iÅŸlevini yerine getiremez/Ã§alÄ±ÅŸamaz.`)
                            })
                        }catch(e){}
                    }else{
                        await channel.send([
                            'Botun Ã§alÄ±ÅŸabilmesi iÃ§in gerekli olan **izinler** eksik. LÃ¼tfen aÅŸaÄŸÄ±da ki listede bulunan izinleri bota saÄŸlayÄ±p/verip tekrar deneyin.',
                            `\n${checkPermissions}\n`,
                            'EÄŸer daha detaylÄ± yardÄ±ma ihtiyacÄ±nÄ±z varsa bizimle iletiÅŸime geÃ§mekten Ã§ekinmeyin.'
                        ].join('\n'))
                    }
                }
            }else{
                await channel.send({
                    embed: command.getErrorEmbed('Bu komutu kullanmak iÃ§in **yetkiniz** yok.')
                })
            }
        }
    }

    public getCommandsArray(): Command[]{
        return Array.from(this.commands.values())
    }

    public getCommandsMap(): CommandMap{
        return this.commands
    }

}
